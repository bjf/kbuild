#!/bin/env python3

# kk is a utility for helping to "crank" kernels. It makes use of the cranky utility in kteam-tools. I find
# the cranky utility to be, generall, more verbose than it needs to be; forces you to run command sequences
# that could easily be combined; are less helpful pointing out real errors.
#

import sys
import os
import pwd
from argparse                           import ArgumentParser, RawTextHelpFormatter

from subprocess                         import PIPE, STDOUT, Popen, CalledProcessError
import shlex


SBUILDRC = '''
# Name to use as override in .changes files for the Maintainer: field. Field is required, there is no default.
#
$maintainer_name='Ubuntu Kernel Team <kernel-team@lists.ubuntu.com>';
$distribution = "jammy";
$build_arch_all = 1;
$run_lintian = 0;

# When to purge the build directory after the build completes. Possible values are "never",
# "successful", and "always".  "always" is the default. It can be helpful to preserve failing
# builds for debugging purposes.
#
# Use "schroot -e --all-sessions" to clean them up manually.
#
$purge_build_directory = 'successful';
$purge_session = 'successful';
$purge_build_deps = 'successful';
$log_dir = '.';

# don't remove this, Perl needs it:
1;
'''

# ------------------------------------------------------------------------------------------------------------------
# Make kb as self contained as possible.
#
def pro(*args, **kwargs):
    print(*args, file=sys.stdout, **kwargs)

def pre(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def stdout(s):
    sys.stdout.write(s)
    sys.stdout.flush()

def stderr(s):
    sys.stderr.write(s)
    sys.stderr.flush()


# ------------------------------------------------------------------------------------------------------------------
MAGENTA = r'[38;5;5m'
GREEN   = r'[38;5;2m'
CYAN    = r'[38;5;6m'
ORANGE  = r'[38;5;214m'
RED     = r'[38;5;1m'
BOLD    = r'[1m'
EOC     = r'[0m'

def cstr(s, c):
    '''
    Colorize a string adding the ASCII characters that set a particular color and/or attribute and then
    disable it.
    '''
    return f'{c}{s}{EOC}'

def section(s):
    '''
    Print a "section" line which is intended to show our progress.
    '''
    stderr(f' . {cstr(s, GREEN)}\n')
    OF.reset()

def mark(s):
    '''
    Print a progress marker. This is usually just a "." so the user knows that "something" is happening.
    '''
    stderr(f'{cstr(s, ORANGE)}')


class AshError(Exception):
    def __init__(self, returncode, cmd, output):
        self.returncode = returncode
        self.command    = cmd
        self.output     = output

def raw_stderr(s):
    stderr(s)

def raw_stdout(s):
    stdout(s)

def ash_to_stderr(line, raw=False):
    pre(line.rstrip())

def ash_to_stdout(line, raw=False):
    pro(line.rstrip())

def ash(command, handler=None):
    results = []
    process = Popen(shlex.split(command), bufsize=1, stdout=PIPE, stderr=STDOUT, encoding='utf-8', errors='replace' )
    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        if output:
            results.append(output.rstrip())
            if handler:
                handler(output)
    rc = process.poll()
    if rc != 0:
        raise AshError(rc, command, results)
    return results

def rash(cmd, handler=None, additional_ssh_options=''):
    return Rash.rash(cmd, handler, additional_ssh_options)

class Rash():
    target = None
    ssh_options = '-o StrictHostKeyChecking=no -o LogLevel=Error'

    @classmethod
    def rash(cls, cmd, handler=None, additional_ssh_options=''):
        rcmd = f'ssh {cls.target} {cls.ssh_options} {additional_ssh_options} -- \'{cmd}\''
        return ash(rcmd, handler=handler)

# ------------------------------------------------------------------------------------------------------------------
class OF():
    '''
    Output Filters
    '''
    started         = False
    completed       = False
    marks           = 0
    max_marks       = 80
    olines          = 0
    olines_per_mark = 100

    @classmethod
    def reset(cls):
        cls.started         = False
        cls.completed       = False
        cls.marks           = 0
        cls.max_marks       = 80
        cls.olines          = 0
        cls.olines_per_mark = 100

    @classmethod
    def rsync(cls, line):
        '''
        rsync output filter
        '''
        if cls.completed:
            return

        if cls.started:
            if line.startswith('total size is'):
                cls.completed = True
                stdout('\n')

        elif line.startswith('sending incremental file list'):
            cls.started = True
            print('rsync started')

    @classmethod
    def sbuild_pkg_install(cls, line):
        '''
        apt install output filter
        '''
        if cls.completed:
            return

        if cls.started:
            if line.startswith('No VM guests are running'):
                cls.completed = True
                stdout('\n')
            else:
                mark('.')
                cls.marks += 1
                if cls.marks == cls.max_marks:
                    stdout('\n    ')
                    cls.marks = 0

        elif line.startswith('WARNING: apt does not have'):
            cls.started = True
            stdout('    ')

    @classmethod
    def sbuild_mk_sbuild(cls, line):
        '''
        sbuild chroot setup output filter
        '''
        if cls.completed:
            return

        if cls.started:
            if line.startswith(' To BUILD within a snapshot'):
                cls.completed = True
                stdout('\n')
            else:
                mark('.')
                cls.marks += 1
                if cls.marks == cls.max_marks:
                    stdout('\n    ')
                    cls.marks = 0

        elif line.startswith('WARNING: apt does not have') and not cls.started:
            cls.started = True
            stdout('    ')
            # print('sbuild setup started')

    @classmethod
    def sbuild_build(cls, line):
        '''
        sbuild build package output filter
        '''
        if cls.completed:
            return

        if cls.started:
            if line.startswith(' To BUILD within a snapshot'):
                cls.completed = True
                stdout('\n')
                # sys.stdout.write('\nsetup completed\n')
            elif line.startswith('| ') and line.endswith(' |'):
                info = line.replace('| ', '').replace(' |', '').replace('  ', '')
                if cls.marks > 0:
                    stdout('\n    ')
                    cls.marks = 0
                # sys.stdout.write(info)
                # sys.stdout.write('\n')
            # elif line.startswith('Package: '):
            #     sys.stdout.write(f'{line}\n')
            elif line.startswith('Status: '):
                stdout(f'{line}\n')
            # elif line.startswith('Version: '):
            #     sys.stdout.write(f'{line}\n')
            # elif line.startswith('Build needed : '):
            #     sys.stdout.write(f'{line}\n')
            else:
                cls.olines += 1
                if cls.olines == cls.olines_per_mark:
                    mark('.')
                    cls.olines = 0
                    cls.marks += 1
                if cls.marks == cls.max_marks:
                    stdout('\n    ')
                    cls.marks = 0

        elif line.startswith('sbuild (Debian sbuild)'):
            cls.started = True
            stdout('    ')
            # print('sbuild build started')

# ------------------------------------------------------------------------------------------------------------------
class CrankyConfigFileMissingError(Exception):
    pass

class InitializationError(Exception):
    pass

class KteamToolsUpdateError(Exception):
    pass

class KernelRepoError(Exception):
    pass

class CheckoutError(Exception):
    pass

class DebianError(Exception):
    pass

class EnvironmentVerificationError(Exception):
    pass

class NotAKernelRepoError(Exception):
    pass

class KernelBuilderBase():
    step = 0

    def __init__(self):
        # cranky_config_path = os.path.expanduser(os.environ['CRANKY_CONFIG_FILE'])
        # if not os.path.exists(cranky_config_path):
        #     raise CrankyConfigFileMissingError(f'The cranky config file ({cranky_config_path}) does not exist.')
        pass

    @property
    def branch(self):
        output = ash('git branch')
        for line in output:
            if line.startswith('*'):
                return line.replace('* ', '').strip()

    def requires_kernel_repo(self):
        try:
            pass

        except (DebianError):
            raise NotAKernelRepoError('The directory you are currently sitting in is not the root of an Ubuntu kernel repository.')

class KernelBuilder(KernelBuilderBase):

    def __init__(self):
        super(KernelBuilder, self).__init__()

    def remote_setup_user(self, user):
        section('Remote User Setup')
        save = Rash.target
        Rash.target = f'ubuntu@{Rash.target}'
        user = pwd.getpwuid(os.getuid()).pw_name
        rash(f'sudo useradd -d /home/{user}/ -p {user} -m -U {user} -s /bin/bash')
        rash(f'sudo rsync -arv .ssh /home/{user}/')
        rash(f'sudo chown -R {user}.{user} /home/{user}/.ssh')
        rash(f'echo "{user} ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers.d/90-cloud-init-users')
        Rash.target = save

    def remote_setup_sbuild(self, user):
        # The sbuild group doesn't exist until we've installed sbuild so install that now.
        #
        section('Install sbuild and ubuntu-dev-tools')
        rash("sudo apt update;sudo apt install sbuild ubuntu-dev-tools -y", OF.sbuild_pkg_install)
        rash(f'sudo usermod -a -G sbuild {user}')

    def remote_clone_kbuild(self):
        section('Clone kbuild tool')
        rash('git clone https://github.com/bjf/kbuild.git')

    def remote_run_kb_setup(self):
        section('Run kb setup on remote')
        rash('kbuild/kb setup', raw_stdout)

    def setup_nvidia_ppa(self):
        # -> cd /
        # -> sudo schroot -c source:jammy-amd64 -- apt-get install software-properties-common --yes
        # -> sudo schroot -c source:jammy-amd64 -- add-apt-repository ppa:canonical-kernel-team/nvidia --yes

        # sudo schroot -c source:jammy-amd64
        #
        # ->    additional_ppas = [
        # ->        'deb http://ppa.launchpad.net/canonical-kernel-team/nvidia/ubuntu jammy main',
        # ->    ]
        # ->    for ppa in additional_ppas:
        # ->        if arch == 'amd64':
        # ->            rash(f'echo "{ppa}" | sudo tee -a /chroots-home/chroots/jammy-amd64/etc/apt/sources.list')
        # ->        elif arch == 'arm64':
        # ->            rash(f'echo "{ppa}" | sudo tee -a /chroots-home/chroots/jammy-arm64/etc/apt/sources.list')
        # ->            rash(f'echo "{ppa}" | sudo tee -a /chroots-home/chroots/focal-arm64/etc/apt/sources.list')
        pass

    def execute(self, cmd: str, remote: str = None) -> None:
        match args.cmd:
            case 'info':
                pass

            case 'setup':
                user = pwd.getpwuid(os.getuid()).pw_name
                if remote:
                    Rash.target = remote
                    # self.remote_setup_user(user)
                    # stdout('\n')
                    # self.remote_clone_kbuild()
                    # stdout('\n')
                    self.remote_run_kb_setup()

                    if False:
                        Rash.target = f'ubuntu@{remote}'

                        try:
                            home = os.path.expanduser('~')
                            ash(f'ssh-keygen -f "{home}/.ssh/known_hosts" -R "{remote}"')
                        except CalledProcessError:
                            # Assuming for now that this is the first time for this host and there is no key to be removed.
                            pass
                        archmap = {
                            'aarch64' : 'arm64',
                            'x86_64'  : 'amd64'
                        }
                        uname = rash('uname -m')[0].strip().split('\n')[-1]
                        arch = archmap[uname]
                        pre(f'This builder is {arch}')
                else:
                    sbuildrc_path = os.path.expanduser('~/.sbuildrc')
                    if os.path.exists(sbuildrc_path):
                        pre('\nWarning:\n    The ~/.sbuildrc file already exists and will not be overwritten.\n')
                    else:
                        with open(sbuildrc_path, 'w') as fd:
                            fd.write(SBUILDRC)

                    section('Install sbuild and ubuntu-dev-tools packages')
                    ash('sudo apt update')
                    ash('sudo apt install sbuild ubuntu-dev-tools -y', OF.sbuild_pkg_install)
                    ash(f'sudo usermod -a -G sbuild {user}')
                    stdout('\n')

                    section('sbuild mk-sbuild')
                    ash("sg sbuild -c 'mk-sbuild 'jammy''", OF.sbuild_mk_sbuild)
                    stdout('\n')

            case 'build':
                pass


if __name__ == '__main__':
    app_description = '''
Kernel build script. It's important to build the kernel packages using techniques that closely match
how Canonical's builders perform builds. With that in mind the builds will be done un chroots using
the sbuild command. This tool is a convenience wrapper around sbuild to hopefully, make it easier to
setup the build environment and then perform the builds.
    '''
    app_epilog = '''
    '''

    cmd_help = '''The kb command to be run, one of:

build                       Run the sbuild command to actually build the kernel package.

help                        Prints this information that you are reading now.

setup                       Create the sbuild environment (chroots).
    '''

    p = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawTextHelpFormatter, add_help=False)
    p.add_argument('cmd', nargs=1, help=cmd_help)
    p.add_argument('--remote', type=str, default=None, help='Perform the operation on a remote system.')
    args = p.parse_args()
    args.cmd = args.cmd[0]

    if args.cmd == 'help':
        p.print_help()
    else:
        try:
            KernelBuilder().execute(args.cmd, args.remote)
            sys.exit(0)
        except (CheckoutError, InitializationError, KteamToolsUpdateError, CrankyConfigFileMissingError) as e:
            pre(f'  ** Error: {str(e)}')
            sys.exit(1)
